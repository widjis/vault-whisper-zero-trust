version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vault-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vault_whisper
      POSTGRES_USER: vault_user
      POSTGRES_PASSWORD: vault_password_dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - vault-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vault_user -d vault_whisper"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vault-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://vault_user:vault_password_dev@postgres:5432/vault_whisper
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      PORT: 3001
      CORS_ORIGIN: http://localhost:5173
      # Argon2 Configuration
      ARGON2_TIME_COST: 3
      ARGON2_MEMORY_COST: 65536
      ARGON2_PARALLELISM: 1
      ARGON2_HASH_LENGTH: 32
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      # Logging
      LOG_LEVEL: debug
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - vault-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  # Frontend Development Server (optional)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: vault-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3001/api
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - vault-network
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev

  # Redis for session storage (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: vault-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vault-network
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  vault-network:
    driver: bridge